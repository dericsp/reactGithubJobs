{"version":3,"sources":["Job.js","JobModal.js","Jobs.js","App.js","serviceWorker.js","index.js"],"names":["Job","job","onClick","Paper","className","Typography","variant","title","company","location","created_at","split","slice","join","Transition","React","forwardRef","props","ref","Slide","direction","JobModal","open","handleClose","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","id","src","company_logo","target","alt","DialogContent","DialogContentText","dangerouslySetInnerHTML","__html","description","DialogActions","Button","color","href","url","rel","Jobs","jobs","useState","setOpen","selectedJobs","selectJob","numJobs","length","numPages","Math","ceil","activeStep","setActiveStep","jobsOnPage","component","map","i","key","MobileStepper","steps","position","nextButton","size","prevActiveStep","disabled","backButton","JOB_API_URL","updateCb","a","fetch","res","json","console","log","App","jobList","updateJobs","useEffect","fetchJobs","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2ba72d4.chunk.js","sourcesContent":["import React from 'react'\nimport { Typography, Paper } from '@material-ui/core'\n\n\nexport default function Job({job, onClick}) {\n  return (\n    <Paper onClick={onClick} className={'job'}>\n      <div>\n      <Typography variant='h5'>{job.title}</Typography>\n      <Typography variant='h6'>{job.company}</Typography>\n      <Typography >{job.location}</Typography>\n      </div>\n      <div>\n      <Typography >{job.created_at.split(' ').slice(0,3).join(' ')}</Typography>\n\n      </div>\n    </Paper>\n  )\n}","import React from 'react'\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n  });\n\nexport default function JobModal({job, open, handleClose}) {\n    if(!job.title) {\n       return  <div />\n    }\n \n    return (\n      <div>\n\n        <Dialog\n          open={open}\n          TransitionComponent={Transition}\n          keepMounted\n          onClose={handleClose}\n          aria-labelledby=\"alert-dialog-slide-title\"\n          aria-describedby=\"alert-dialog-slide-description\"\n        >\n          <DialogTitle id=\"alert-dialog-slide-title\">\n              {job.title} - \n              {job.company}\n              <img className={'detail-logo'} src={job.company_logo} target='_blank' alt={job.company}/>\n            </DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-slide-description\" \n            dangerouslySetInnerHTML = {{__html: job.description}} \n            >\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n              Close\n            </Button>\n            <a href={job.url} target=\"_blank\" rel=\"noopener noreferrer\">\n            <Button onClick={handleClose} color=\"primary\">\n              Apply\n            </Button>\n            </a>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }","import React from 'react'\nimport Typography from '@material-ui/core/Typography';\nimport MobileStepper from '@material-ui/core/MobileStepper';\nimport Button from '@material-ui/core/Button';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport Job from './Job';\nimport JobModal from './JobModal'\n\n\nexport default function Jobs({jobs} ) {\n\n// modal \nconst [open, setOpen] = React.useState(false);\nconst [selectedJobs, selectJob] = React.useState({});\n  \nconst handleClickOpen = () => {\n  setOpen(true);\n};\n\nconst handleClose = () => {\n  setOpen(false);\n};\n\n// Pagination\n  const numJobs = jobs.length;\n  const numPages = Math.ceil(numJobs / 50); \n  const [activeStep, setActiveStep] = React.useState(0);\n  const jobsOnPage = jobs.slice(activeStep * 50, (activeStep * 50) + 50);\n\n\n  // step == 0, show  0 - 49\n  // step == 1, show 50 - 99\n\n  const handleNext = () => {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  }; \n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n\n  \n  return (\n    <div className=\"jobs\">\n      <JobModal open={open} job={selectedJobs} handleClose={handleClose} />\n      <Typography variant=\"h4\" component=\"h1\">\n        Entry Level Software Jobs\n      </Typography>\n      <Typography variant=\"h6\" component=\"h1\">\n        Found {numJobs} Jobs\n      </Typography>\n      {\n        jobsOnPage.map(\n          (job, i) => <Job key={i} job={job} onClick={() => {\n            handleClickOpen();\n            selectJob(job)\n          }} />\n\n        )\n      }\n      <div>\n        Page{activeStep + 1} of {numPages}\n      </div>\n\n<MobileStepper\n      variant=\"progress\"\n      steps={numPages}\n      position=\"static\"\n      activeStep={activeStep}\n      nextButton={\n        <Button size=\"small\" onClick={handleNext} disabled={activeStep === numPages -1}>\n          Next\n          <KeyboardArrowRight />\n        </Button>\n      }\n      backButton={\n        <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\n           <KeyboardArrowLeft />\n          Back\n        </Button>\n      }\n    />\n\n\n    </div>\n  )\n}\n","import React from 'react';\nimport './App.css';\nimport Jobs from './Jobs';\n\nconst JOB_API_URL = '/api/jobs';\n\nasync function fetchJobs(updateCb) {\n  const res = await fetch(JOB_API_URL);\n  const json = await res.json();\n\n  updateCb(json);\n\n  console.log({json});\n}\n\nfunction App() {\n\n  const [jobList, updateJobs] = React.useState([ ])\n\n  React.useEffect(() => {\n    fetchJobs(updateJobs);\n  }, [])\n  return (\n    <div className=\"App\">\n      <Jobs jobs={jobList} />\n    </div>\n  );\n}\n\nexport default App; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}